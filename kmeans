
from __future__ import division
import sys, os
import random
import numpy
import copy
import operator
import time
import threading
import math
# import cPickle
import heapq
import itertools
import random
import bisect

from code_rough.text import list1


class Point:
    def __init__(self, p, dim, id=-1):
        self.coordinates = []
        self.pointList = []
        self.id = id
        self.pointCentroid = 0
        for x in range(0, dim):
            self.coordinates.append(p[x])
        self.centroid = None


class Centroid:
    count = 0

    def __init__(self, point):
        self.point = point
        self.count = Centroid.count
        self.pointList = []  # 点集合
        self.centerPos = []
        self.predictions = []
        self.centerPos.append(self.point)  # 中心位置坐标集合
        self.centroid = None
        Centroid.count += 1

    # 更新中心点坐标=加中心点坐标，其余均为基本的点操作
    def update(self, point):
        self.point = point
        self.centerPos.append(self.point)

    def addPoint(self, point):
        self.pointList.append(point)

    def removePoint(self, point):
        self.pointList.remove(point)


class Kmeans:
    def __init__(self, k, pointList, kmeansThreshold, initialCentroids=None):
        self.pointList = []
        self.numPoints = len(pointList)
        self.k = k
        self.initPointList = []
        self.dim = len(pointList[0])  # dim表示维度
        self.kmeansThreshold = kmeansThreshold  # 阈值，是循环结束的标准嘛？
        self.error = None
        self.errorList = []
        i = 0
        # Point返回是啥呀？
        for point in pointList:
            p = Point(point, self.dim, i)
            i += 1
            self.pointList.append(p)

        if initialCentroids != None:
            self.centroidList = self.seeds(initialCentroids)
        else:
            self.centroidList = self.selectSeeds(self.k)
        self.mainFunction()

    # 选择种子？？
    def selectSeeds(self, k):
        # 随机选取中心点的坐标，方便后续重新计算中心点
        # random.sample()可以从指定的序列中，随机的截取指定长度的片断，不作原地修改
        seeds = random.sample(self.pointList, k)
        centroidList = []
        for seed in seeds:
            centroidList.append(Centroid(seed))
        return centroidList

    def seeds(self, initList):
        centroidList = []
        for seed in initList:
            centroidList.append(Centroid(seed))
        return centroidList

    # 判断两点距离，带开方的，与维度有关，算欧式距离
    def getDistance(self, point1, point2):
        distance = 0
        for x in range(0, self.dim):
            distance += (point1.coordinates[x] - point2.coordinates[x]) ** 2
        return (distance) ** (0.5)

    # 获取中心点，也就是判断该点是属于哪一类的
    def getCentroid(self, point):
        minDist = -1
        pos = 0
        for centroid in self.centroidList:
            # 当前点与中心点列中的点逐个计算距离
            dist = self.getDistance(point, centroid.point)
            if minDist == -1:
                minDist = dist
                closestCentroid = pos
            # 	选出最小的距离，并记录点的位置
            elif minDist > dist:
                minDist = dist
                closestCentroid = pos
            pos += 1
        # 	返回该点与中心点的最短距离以及最近点的下标
        return (closestCentroid, minDist)

    # 重新计算中心点的坐标，并对列表进行更新centrolist
    def reCalculateCentroid(self):
        pos = 0
        for centroid in self.centroidList:
            zeroArr = []
            for x in range(0, self.dim):
                zeroArr.append(0)
            mean = Point(zeroArr, self.dim)
            for point in centroid.pointList:
                for x in range(0, self.dim):
                    mean.coordinates[x] += point.coordinates[x]
            for x in range(0, self.dim):
                try:
                    mean.coordinates[x] = mean.coordinates[x] / len(centroid.pointList)
                except:
                    mean.coordinates[x] = 0
            centroid.update(mean)
            self.centroidList[pos] = centroid
            pos += 1

    # 分配点，离那个近分配给那个，是第一次的比较特殊，后面循环迭代
    def assignPointsInit(self):
        for i in range(len(self.pointList) - 1, -1, -1):
            temp = self.getCentroid(self.pointList[i])
            centroidPos = temp[0]
            centroidDist = temp[1]
            if self.pointList[i].centroid is None:
                self.pointList[i].centroid = centroidPos
                self.centroidList[centroidPos].pointList.append(copy.deepcopy(self.pointList[i]))

    # 第一次选定中心点，分配后还要记住每个区域里都有哪些点
    def assignPoints(self):
        doneMap = {}
        for i in range(len(self.centroidList) - 1, -1, -1):
            for j in range(len(self.centroidList[i].pointList) - 1, -1, -1):
                try:
                    a = doneMap[self.centroidList[i].pointList[j].id]
                except:
                    doneMap[self.centroidList[i].pointList[j].id] = 1
                    temp = self.getCentroid(self.centroidList[i].pointList[j])
                    centroidPos = temp[0]
                    centroidDist = temp[1]
                    # 属于中心点第i个的所有点的中心？？？
                    if self.centroidList[i].pointList[j].centroid != centroidPos:
                        self.centroidList[i].pointList[j].centroid = centroidPos
                        self.centroidList[centroidPos].pointList.append(
                            copy.deepcopy(self.centroidList[i].pointList[j]))
                        del self.centroidList[i].pointList[j]

    # 差错控制
    def calculateError(self, config):
        error = 0
        for centroid in self.centroidList:
            for point in centroid.pointList:
                error += self.getDistance(point, centroid.point) ** 2
        return error

    def errorCount(self):
        self.t = threading.Timer(0.5, self.errorCount)
        self.t.start()
        startTime = time.time()
        timeStamp = 0
        if self.error != None:
            timeStamp = math.log(self.error)
        endTime = time.time()
        self.errorList.append(timeStamp)
        self.ti += 0.5

    # 主要功能，整合在一起，好像后面写东西都可以这样写
    def mainFunction(self):
        self.iteration = 1
        self.ti = 0.0
        self.errorCount()
        error1 = 2 * self.kmeansThreshold + 1
        error2 = 0
        iterationNo = 0
        self.currentTime = time.time()
        self.startTime = time.time()
        self.assignPointsInit()
        while (abs(error1 - error2)) > self.kmeansThreshold:
            iterationNo += 1
            self.iteration = iterationNo
            error1 = self.calculateError(self.centroidList)
            self.error = error1
            print("Iteration:", iterationNo, "Error:", error1)
            self.reCalculateCentroid()
            self.assignPoints()
            error2 = self.calculateError(self.centroidList)
            self.error = error2

        self.t.cancel()


def makeRandomPoint(n, lower, upper):
    return numpy.random.normal(loc=upper, size=[lower, n])


if __name__ == '__main__':
    pointList = []
    x = []
    y = []
    c = []
    numPoints = 10000
    dim = 10
    numClusters = 100
    k = 0
    for i in range(0, numClusters):
        num = int(numPoints / numClusters)
        p = makeRandomPoint(dim, num, k)
        k += 5
        pointList += p.tolist()
    print(len(pointList))
    start = time.time()
    # self, k, pointList, kmeansThreshold, predictionThreshold, isPrediction = 0, initialCentroids = None
    # 这块的执行难道就没有个先后顺序嘛？还是说类里面的函数会全部执行还是用到那个执行那个？
    print(len(list1))
    config = Kmeans(numClusters, list1, 1000)
    print("Time taken:", time.time() - start)
